my_strings
print(my_vector)
cat(my_vector)
print(my_vector)
length(my_vector)
my_vector <l- 1:1000
my_vector <- 1:1000
length(my_vector)
sum(my_vector)
my_vector <- 1:100
sum(my_vector)
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = T)
my_matrix
1:25
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = TRUE)
my_matrix
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = FALSE)
my_matrix
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = TRUE)
my_matrix
my_matrix[3,3]
my_matrix[2,4]
my_matrix[5,2]
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5)
my_matrix
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = TRUE)
my_matrix[1,]
my_matrix
my_matrix[,5]
?matrix
?summ
?sum
?matrix
student_id <- c(1:10)
student_id
rm(list = ls())
student_id <- c(1:10)
grades <- c("A","B","C","A","C","F","D","B","B","A")
# The rep() function repeats some value for a specified number of times.
class <- c(rep(0,times = 5),rep(1,times = 5))
free_lunch <- rep(TRUE,times = 10)
student_id <- 1:10
student_id <- c(1:10,15)
student_id
student_id <- c(1:10,15,17,20:45)
student_id
rep(0,times = 5)
rep(1,times = 5)
c(rep(0,times = 5),rep(1,times = 5))
rep("cats",100)
student_id <- c(1:10)
grades <- c("A","B","C","A","C","F","D","B","B","A")
# The rep() function repeats some value for a specified number of times.
class <- c(rep(0,times = 5),rep(1,times = 5))
free_lunch <- rep(TRUE,times = 10)
my_data <- data.frame(student_id,
grades,
class,
free_lunch,
stringsAsFactors = FALSE)
my_matrix <- matrix(data = c(1:25), # what gets stored in the matrix
ncol = 5, # the number of columns
nrow = 5, # the number of rows
byrow = TRUE)
View(my_matrix)
View(my_data)
my_data
my_data[2,3]
my_data[2,2]
colnames(my_data) <- c("Student_ID", "Grades","Class","Free_Lunch")
View(my_data)
LETTERS
LETTERS[11:20]
rownames(my_data) <- LETTERS[11:20]
View(my_data)
rownames(my_data) <- LETTERS
rownames(my_data) <- LETTERS[11:20]
my_data$Grades
View(my_data)
which(my_data$Grades == "A")
my_data
which(my_data$Grades != "A")
A_students <- which(my_data$Grades == "A")
B_students <- which(my_data$Grades == "B")
students_for_reduced_dataset <- c(A_students, B_students)
data[students_for_reduced_dataset,]
my_data[students_for_reduced_dataset,]
reduced_data <- my_data[students_for_reduced_dataset,]
View(reduced_data)
which(my_data$Grades == "A" & my_data$Class == 0)
View(my_data)
which(my_data$Grades == "A" | my_data$Grades == "B")
reduced_data <- my_data[students_for_reduced_dataset,]
c(1:5,7,9)
my_data[c(1:5,7,9),c(2,4)]
?vector
my_list <- vector(mode = "list", length = 10)
my_list <- list(num = 10,
animal = "dog",
vec = c(1:10),
dat = my_data)
my_list[[2]]
my_list <- vector(mode = "list", length = 10)
my_list[[1]] <- 75235356
my_vector = 1:10
my_vector[11] <- 24
my_vector[17] <- 24
my_vector
my_list$dogs_rule <- "cats drool"
my_list <- list(num = 10,
animal = "dog",
vec = c(1:10),
dat = my_data)
my_list <- append(my_list, list(list(27,14,"cat")))
my_list
my_list[[4]]
my_list$dat
my_list[[5]]
write.csv(x = my_data,
file = "school_data.csv",
row.names = FALSE)
school_data <- read.csv(file = "school_data.csv",
stringsAsFactors = FALSE,
sep = ",")
View(school_data)
install.packages("rio", dependencies = TRUE)
library(rio)
?export
export(my_data, "school_data.xlsx")
excel_school_data <- import("school_data.xlsx")
print(
)
excel_school_data <- import("school_data.xlsx")
export(data, "school_data.dta")
# Then read it back in:
stata_school_data <- import("school_data.dta")
export(my_data, "school_data.dta")
stata_school_data <- import("school_data.dta")
save(my_data, file = "Object.RData")
save(list = c("my_data", "reduced_data"), file = "Two_objects.RData")
ls()
save(list = ls(), file = "MyData.RData")
rm(list = ls())
setwd("~/Desktop")
load(file = "Two_objects.RData")
View(my_data)
load(file = "MyData.RData")
rm(list = ls())
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Scripts")
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Scripts")
setwd("~/Desktop")
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Scripts")
rm(list = ls())
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017")
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Scripts")
print("Hello World")
cat("Hello World")
{
cat("Hello")
cat("World")
}
{
print("Hello")
print("World")
}
{
cat("Hello \n")
cat("World")
}
{
cat("Hello \n")
cat("World")
{
cat("Hello \n")
cat("World")
}
}
}}}
{
cat("Hello \n")
cat("World")
}
fingers <- 8
print(paste("Hello,", "I have", fingers, "fingers", sep = " "))
print(paste("Hello,", "I have", fingers, "fingers", sep = "-----"))
cat(paste("Hello,", "I have", fingers, "fingers", sep = " "))
cat("Hello,", "I have", fingers, "Fingers", sep = " ")
cat("My Grocery List:\n", "1 dozen eggs\n",
"1 loaf of bread\n 1 bottle of orange juice\n",
"1 pint mass mocha", sep = " ")
my_vector <- c(20:30)
my_vector
cat(my_vector)
1:length(my_vector)
for (i in 1:4) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
for (i in 1:10) {
cat("Cats rule!!!!\n")
}
for (i in 1:1000) {
cat("Cats rule!!!!\n")
}
my_vector <- c(20:30)
# Take a look at tis contents:
cat(my_vector)
for (i in 1:length(my_vector)) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
cat(my_vector)
i <- 76
for (i in 1:length(my_vector)) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
i <- 76
# Loop over each index (position) in the vector at replace it with its square
# root:
for (j in 1:length(my_vector)) {
cat(j,"\n")
my_vector[j] <- sqrt(my_vector[j])
}
i <- 76
# Loop over each index (position) in the vector at replace it with its square
# root:
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
my_vector <- c(20:30)
# Take a look at tis contents:
cat(my_vector)
# Notice how the value of i changes when we are inside the loop
i <- 76
# Loop over each index (position) in the vector at replace it with its square
# root:
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
for (icecream in 1:length(my_vector)) {
cat(icecream,"\n")
my_vector[icecream] <- sqrt(my_vector[icecream])
}
my_vector <- c(20:30)
# Take a look at tis contents:
cat(my_vector)
# Notice how the value of i changes when we are inside the loop
i <- 76
# Loop over each index (position) in the vector at replace it with its square
# root:
for (i in 1:length(my_vector)) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
# Display the result:
cat(my_vector)
my_num <- 0
for (i in 1:100) {
my_num <- my_num + i
cat("Current Iteration:",i,"My_num value:",my_num,"\n")
}
1+2+3+4+5+6+7+8+9+10
fingers <- 8.0
fingers <- 8.0000000
my_number <- 19
if (my_number < 20) {
cat("My number is less than 20 \n")
}
my_number <- 19
if (my_number < 20) {
cat("My number is less than 20 \n")
}
my_number <- 22
if (my_number < 20) {
cat("My number is less than 20 \n")
}
my_vector <- c(20:30)
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
cat("The square root is 5! \n")
}
}
my_vector <- c(20:30)
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
print("I am 25!")
} else {
print("I am not 25!")
}
}
my_column_sum <- function(col_number,
my_matrix){
# Take the column sum of the matrix:
col_sum <- sum(my_matrix[,col_number])
# We always include a return statement at the end of the function which
# gives us back whatever the function computed. Note that we can only return
# one object (variable) in this return statement:
return(col_sum)
}
my_mat <- matrix(1:100,
nrow = 10,
ncol = 10)
View(my_mat)
my_mat
my_column_sum(col_number = 1,
my_matrix = my_mat)
temp <- my_column_sum(col_number = 1,
my_matrix = my_mat)
temp
temp <- my_column_sum(col_number = 2,
my_matrix = my_mat)
temp
my_mat2 <- matrix(1:100,
nrow = 10,
ncol = 10)
temp <- my_column_sum(col_number = 1,
my_matrix = my_mat2)
my_column_sum(col_number = 1,
my_matrix = my_mat)
sum(my_mat[,1])
for (i in 1:10) {
cat(my_column_sum(i, my_mat),"\n")
}
for (i in 1:10) {
cat(my_column_sum( my_mat, i),"\n")
}
for (i in 1:10) {
cat(my_column_sum(col_number = i,
my_matrix = my_mat),"\n")
}
rm(list = ls())
my_mat <- matrix(1:100,
nrow = 10,
ncol = 10)
temp <- my_column_sum(col_number = 1,
my_matrix = my_mat)
my_column_sum <- function(col_number,
my_matrix){
# Take the column sum of the matrix:
col_sum <- sum(my_matrix[,col_number])
# We always include a return statement at the end of the function which
# gives us back whatever the function computed. Note that we can only return
# one object (variable) in this return statement:
return(col_sum)
}
col_sums_for_fun <- function(mat) {
# Figure out the number of columns:
cols <- ncol(mat)
# Loop over columns:
for (i in 1:cols) {
# Calculate the column sum:
cat(my_column_sum(i, mat),"\n")
}
}
my_mat2 <- matrix(301:700,
nrow = 20,
ncol = 20)
View(my_mat2)
col_sums_for_fun(my_mat2)
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017")
load("./Data/Example_Data.Rdata")
View(data)
View(data)
reduced_data <- data[which(data$BillType == "HR" & data$Major < 11),]
View(reduced_data)
View(reduced_data)
party_topic_statistics <- matrix(0,
nrow = 10,
ncol = 2)
i <- 1
j <- 1
if (j == 1) {
party <- 100 # Code for a Democrat sponosred bill
} else {
party <- 200 # Code for a Republican sponosred bill
}
current_data <- reduced_data[which(reduced_data$Party == party &
reduced_data$Major == i),]
View(current_data)
i <- 56
current_data <- reduced_data[which(reduced_data$Party == party &
reduced_data$Major == i),]
i <- 1
current_data <- reduced_data[which(reduced_data$Party == party &
reduced_data$Major == i),]
nrow(current_data) > 0
current_data <- current_data[which(current_data$PassH == 1),]
cosponsorship_weight <- nrow(current_data) /
sum(current_data$Cosponsr)
cosponsorship_weight
is.nan(cosponsorship_weight)
if (is.nan(cosponsorship_weight) | cosponsorship_weight > 1 ) {
cosponsorship_weight <- 0
}
party_topic_statistics <- matrix(0,
nrow = 10,
ncol = 2)
# At the highest level, we need to loop over topics:
for (i in 1:10) {
# Now for each topic we loop over parties:
for (j in 1:2) {
# Set the variable we are going to lookup against for party ID:
if (j == 1) {
party <- 100 # Code for a Democrat sponosred bill
} else {
party <- 200 # Code for a Republican sponosred bill
}
# Subset our data down to the current party/topic combination:
current_data <- reduced_data[which(reduced_data$Party == party &
reduced_data$Major == i),]
# Check to make sure that there are more than zero observations for the
# current party/topic combination:
if (nrow(current_data) > 0) {
# Now subset to those bills that passed the House:
current_data <- current_data[which(current_data$PassH == 1),]
# Here again we should check to make sure we are not left with zero
# rows. However, in this example, I will do doing this check in a
# different way (for the purposes of illustration).
# Calculate the weight:
cosponsorship_weight <- nrow(current_data) /
sum(current_data$Cosponsr)
# Check to see if it is a valid weight, if not, set equal to zero:
if (is.nan(cosponsorship_weight) | cosponsorship_weight > 1 ) {
cosponsorship_weight <- 0
}
# Take the current weight and put it in our dataset:
party_topic_statistics[i,j] <- cosponsorship_weight
}
}
}
View(party_topic_statistics)
party_topic_statistics
load("./Data/Topic_Lookup.Rdata")
# Look at the labels:
major_topic_lookup
major_topic_lookup[2,1] <- "2. Civil Rights"
setwd("~/Desktop")
View(party_topic_statistics)
pdf(width = 5, # in inches
height = 8, # in inches
file = "My_Plot.pdf")
# We want a wider margin on the bottom and left sides so our text will fit.
# margins go (bottom, left, top, right):
par(mar = c(13,5,2,2))
# Plot our data using 'matplot()', which lets us easily plot more than one
# series on the same axes:
matplot(x = 1:10,  # this tells matplot what the x values should be
y = cbind(party_topic_statistics[,2],party_topic_statistics[,1]), # this
# reverses Democrat and Republican so it is easier to see the Democrat
# points and then specifies the y values
pch = 19, # this sets the point type to be dots
xlab = "", # this tells 'matplot()' not plot an x label as we will
# specify it later
ylab = "Cosponsorships Per Passed Bill", # the y label
xaxt = "n", # don't plot any x-axis ticks
col = c("red","blue"), # The colors for the dots, blue is Democrat, red
# is Republican
ylim = c(-0.01,.2) # the y-limits of the plotting range
)
# Now we can add a custom x-axis with our topic labels:
axis(side = 1,
at = 1:10,
tick = FALSE,
labels = major_topic_lookup[1:10,1],
las = 3)
# We are done making our PDF, so we finalize it:
dev.off()
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Scripts")
rm(list = ls())
# Set your working directory to the workshop repo location:
setwd("~/Documents/RA_and_Consulting_Work/ISSR_Data_Management_Web_Scraping_2017/Data")
# Load in the data we will be using:
load("Example_Tweets.RData")
View(tweets)
